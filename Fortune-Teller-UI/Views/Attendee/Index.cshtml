@model IEnumerable<FortuneTeller.Models.AttendeeModel>

@{
    ViewData["Title"] = "Connections";
}
<div class="panel-heading">
    <div class="media">
        <a class="pull-left" href="http://pivotal.io">
            <img class="" src="~/images/icon_pivotal_generic@2x.png" title="Cloud Foundry" alt="PCF" width="40" height="40" />
        </a>
        <div class="media-body">
            <h2 class="media-heading">Connections for .NET</h2>
        </div>
    </div>
    <p class="lead">Handling database and service connections</p>
    <p class="body-content">Implement Cloud Native patterns for applications needing access to data and services.  Write your code so that it can run the same way on your development machine and on the production server using appsettings.json, configuration server, and user provided services.</p>
</div>
<div class="panel-heading">
    <h4><b>Continue using existing databases and services with Pivotal Application Services.</b></h4>
    <h5><b>SQL Server Database Connection String</b></h5>
    <h5>@ViewData["ConnectionString"]</h5>
    <h5><b>Source:</b> @ViewData["ConnectSource"]</h5>
</div>
<div class="panel-body">
    <p>
        <a asp-action="Create">Create New Attendee</a>
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Email)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Department)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Department)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>